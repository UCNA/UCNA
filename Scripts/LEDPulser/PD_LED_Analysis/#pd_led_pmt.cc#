// c includes 
#include <stdlib.h>
#include <stdio.h>
#include <math.h>
//#include <gsl/gsl_poly.h>

// ROOT includes
#include <TF1.h>
#include <TChain.h>
#include <TString.h>
#include <TCut.h>
#include <TProfile.h>
#include <TCanvas.h>
#include <TGraph.h>
#include <TGraphErrors.h>
#include <TH2F.h>
#include <TStyle.h>
#include <TApplication.h>

#include <iostream>
#include <fstream>

/**
 *
 * Authors: Kevin Peter Hickerson
 *          Michael Mendenhall
 *          Simon Slutsky
 * Date: Aug 2010
 * Modified: July 16, 2011
 * Modified: Feb 25, 2013
 * Modified: Sep 30, 2013 (SS)
 *
 * Build instructions:
USE THIS:
 *  g++ `root-config --cflags` pd_led_pmt.cc `root-config --libs` -o pd_led_pmt_analysis
FOLLOWING DOESN'T WORK:
 *  g++ `root-config --cflags` `root-config --libs` pd_led_pmt.cc -o pd_led_pmt_analysis
 *
 * If GSL is needed use:
 *  g++ `root-config --cflags` `root-config --libs` -lgsl -lgslcblas -lm pd_led_pmt.cc -o pd_led_pmt_analysis
 *
 */

#define NUM_CHANNELS 8
#define LED_TYPE DOWN
#define USE_ROOT_APPLICATION false
#define OUTPUT_IMAGE true
#define OUTPUT_IMAGE_DIR "/data4/saslutsky/PulserComp/imagesLEDDebug/"  // DON'T OMIT THE TRAILING SLASH
#define VERBOSE false
#define LINEARIZE false
#define ORDER 0 // Power law fit
//#define ORDER 3 // Kevin's default
#define FIT2D false
#define DO_LED_FIT 0

TF1* FitGaussian(const char *name, TTree *tree, TCut* cut)
{
    char gaussian_name[1024];
    sprintf(gaussian_name, "pedestal_histogram_%s", name);
    char gaussian_draw[1024];
    sprintf(gaussian_draw, "%s >> %s", name, gaussian_name);
    TH1F* gaussian_histogram = new TH1F(gaussian_name, "Gaussian Events", 2000, 0, 2000);
    tree->Draw(gaussian_draw, *cut, "Ngoff"); 
    int max_bin = gaussian_histogram->GetMaximumBin();
    float max_bin_x = gaussian_histogram->GetBinCenter(max_bin);
    TF1 *fit = new TF1("gauss_fit", "gaus", max_bin_x-12, max_bin_x+12);
    if (not gaussian_histogram->Fit(fit, "RN"))
    {
        printf("Gaussian fit success: mu = %g, sigma = %g\n", fit->GetParameter(1), fit->GetParameter(2));
        return fit;
    } 
    else 
    {
        printf("Couldn't fit Gaussian to %s\n", name);
        return 0;
    }
}


/**
 * main
 */
int main (int argc, char **argv)
{
	// first run number
    if (argc < 2)
    {
        printf("Usage: %s <daq run number> [<second run number>]\n", argv[0]);
        exit(1);
    }
    int run = atoi(argv[1]);
    int run_end = run;
    if (not run)
    {
        printf("Need a valid run number for first argument.\n");
        printf("Usage: %s <daq run number> [<second run number>]\n", argv[0]);
        exit(1);
    }

    // next run number for a range
    if (argc > 2)
    {
        run_end = atoi(argv[2]);
        if (not run_end)
        {
            printf("Need a valid run number for second argument.\n");
            printf("Usage: %s <daq run number> [<second run number>]\n", argv[0]);
            exit(1);
        }
    }


	// constants (maybe should be set by options too?)
	//enum {DOWN, UP, GAIN, TIME, TIMEUP, TIMEDOWN, TIMEGAIN};
	enum {DOWN, UP, GAIN, TIME};
	const int pulser_steps = 64;
	const int max_cycles = 100; // more than an hour
	int n = max_cycles * pulser_steps * 100;  // this can be updated later to be more accurate
	const float max_pdc_channel = 400;
	const float max_adc_channel = 3400;
	const float mid_adc_channel = 3000;
	const float min_adc_channel = 100;
    const float max_npe = 400;
	const float epsilon = 8e4; // us
	const float window = 3e4; // us
	const float avg_period = 60.03e6; // us
 	const float max_period = avg_period + window; // us
 	const float min_period = avg_period - window; // us


	// some strings we will use
	TString wavelength[2] = { "405", "465" };
	TString detector[8] = { "E1", "E2", "E3", "E4", "W1", "W2", "W3", "W4" };
    TString Qadc[8] = { "Qadc0", "Qadc1", "Qadc2", "Qadc3", "Qadc4", "Qadc5", "Qadc6", "Qadc7"};


    // run this as a ROOT application
	#if USE_ROOT_APPLICATION
    TApplication app("LED Scans", &argc, argv);
	#endif


    // Plot options
    gStyle->SetOptStat(1);
    gStyle->SetOptFit(1);


	// Open files
	// example paths for various computers:
	// ferrari.caltech.edu: /home/kevinh/Data/UCN/UCNA2011/rootfiles
	// pcucn19.caltech.edu: /home/data_analyzed/2011/rootfiles
	// ucn.caltech.edu: 	/data/ucnadata/2011/rootfiles
    TChain h1("h1");
    for (int n = 1; n < argc; n++) {
		char * rootfiles;
        char filename[1024];
		rootfiles = getenv("UCNADATADIR");
		if (not rootfiles)
		{
			printf("Environment variable UCNADATADIR not set. Can't find root files.\n");
			printf("try setting it with export. Here are some examples for different machines\n");
			printf("On the machine pcucn18.caltech.edu, try\n");
			printf(" export UCNADATADIR=/home/data_analyzed/2011/rootfiles\n");
			printf("On the machine ucn.caltech.edu, tryi\n");
			printf(" export UCNADATADIR=/data/ucnadata/2011/rootfiles\n");
			exit(1);
		}
        sprintf(filename, "%s/full%s.root", rootfiles, argv[1]);
        if (not h1.Add(filename))
		{
			printf("Could not find root file full%s.root\n", argv[1]);
			printf("The path set by UCNADATADIR could be set to the wrong dir\n");
			printf("or the run number does not exist in that dir.");
			exit(1);
		}
    }


    // Initialize the cycles peaks
    float max_val[max_cycles];
    float max_time[max_cycles];
	for (int cycle = 0; cycle < max_cycles; cycle++)
	{
		max_val[cycle] = 0;
		max_time[cycle] = 0;
	}


	// Sync peaks and find periods
	{
		// set the branches we need
		h1.SetBranchStatus("*",0);
		h1.SetBranchStatus("Sis00", 1);
		h1.SetBranchStatus("S83028", 1);
		h1.SetBranchStatus("Pdc36", 1);

		n = h1.GetEntries();
		h1.SetEstimate(n);
		int vn = h1.Draw("Pdc36:S83028",
				 "(int(Sis00) & 128) > 0", "goff");
		
		double *pdc36v = h1.GetV1();
		double *s83028v = h1.GetV2();
		std::cout << "Number of LED events: " << vn << std::endl;

		double start_time = 0;//s83028v[0];
		int start_index = 0;
		const int repeat = 8; 
		for (int i = vn - 1; i >= start_index + repeat; i--) 
		{
			double time = s83028v[i] - start_time;
			int cycle = time/avg_period;
			bool max_found = true;

			// hack to fix first cycle syncing problem
			if (cycle == 0) 
				break;

			// need a few large values in a row
			for (int j = 0; j < repeat; j++)
			{
				if (pdc36v[i-j] <= max_val[cycle])
					max_found = false;
			}

			// then set the max found for this cycle
			if (max_found)
			{
				max_val[cycle] = pdc36v[i]; 
				max_time[cycle] = s83028v[i]; 
			}
		}

		#if VERBOSE
		std::cout << "Start time: " << start_time << "\n";
		std::cout << "1st max PD (Pdc36): " << max_val[0] << "\n";
		std::cout << "1st start time (S83028): " << max_time[0] / 1e6 << "\n";
		for (int cycle = 1; cycle < max_cycles; cycle++)
		{
			if (max_val[cycle] == 0)
				break;

			std::cout << cycle + 1 << "th max PD (Pdc36): " << max_val[cycle] << "\n";
			std::cout << cycle + 1 << "th start time (S83028): " << max_time[cycle]/ 1e6  << "\n";
			std::cout << cycle << "th Period: " << (max_time[cycle] - max_time[cycle-1]) / 1e6 << "\n";
		}
		#endif
	}

    // Define a histo for the true PD signal history (before cycle parsing)
    TString true_time_title = "True PD time sequence for run ";
    true_time_title += run;
    TH2F* true_time_his2D = new TH2F("true_time_his2D", true_time_title,
				     360000., 0, 3600.,
				     1<<8, -100, 1000);
    h1.Draw("Pdc36:S83028/1000000.>>true_time_his2D", "(int(Sis00) & 128) > 0", "goff");

    // Define cuts
    TCut *led_cut = new TCut("(int(Sis00) & 128) > 0");  // 129 if east-PMTs on, 161 if GMS-ref also on
    TCut *pedestal_cut = new TCut("!(int(Sis00) & 1)");  


	// The histograms and canvases we will use 
    TH2F* time_his2D[4];
    TH1F* pmt_gain_his1D[8];
    TH2F* pmt_gain_his2D[8];
    TH1F * time_his1D;
    TH2F* pd_pmt_his2D[2][8];
    TGraphErrors* graph[2][8];
    TCanvas* canvas[8];
    TGraph* g[8];
    TGraphErrors* resg[8];


	// global Style options
    gStyle->SetPalette(1);
    gStyle->SetOptStat("");


	// find PD pedestal
	h1.SetBranchStatus("Pdc36", 1);
    TF1 *pd_pedestal_fit = FitGaussian("Pdc36", &h1, pedestal_cut);
    float pd_pedestal = 0;
    if (pd_pedestal_fit)
        pd_pedestal = pd_pedestal_fit->GetParameter(1);
    else
        printf("couldn't fit pedestal to Pdc36\n");
    printf("PD pedestal = %f\n", pd_pedestal);

	
	// Making our histograms for the time sequence
	TString time_title = "PD time sequence for run ";
			time_title += run;
	time_his2D[TIME] = new TH2F("H2F_time_name", time_title, 
			3600*10, 0, 3600,
			1<<8, -pd_pedestal, 500-pd_pedestal);

	time_his2D[UP] = new TH2F("H2F_time_up_name", time_title, 
			3600*10, 0, 3600,
			1<<8, -pd_pedestal, 500-pd_pedestal);

	time_his2D[DOWN] = new TH2F("H2F_time_down_name", time_title, 
			3600*10, 0, 3600,
			1<<8, -pd_pedestal, 500-pd_pedestal);

	time_his2D[GAIN] = new TH2F("H2F_time_gain_name", time_title, 
			3600*10, 0, 3600,
			1<<8, -pd_pedestal, 500-pd_pedestal);
	time_his1D = new TH1F("H1F_time_gain_name_1D", time_title,
			      100, 200, 300);

	// prepare a file to store linearity fit parameters
	double * fitpars = 0; 
	double * fitparerrors = 0;
	double fitchisq = 0;
	int Npar;

	TString fitfilename = "FitResults.txt";
	fitfilename = OUTPUT_IMAGE_DIR + fitfilename;
	ofstream fitfile;
	fitfile.open(fitfilename, std::ofstream::out | std::ofstream::app);
	// Can't get the string to write for only first file
	/*TString fit_header_string = "Run\t";
	fit_header_string += "Channel\t";
	fit_header_string += "Wavelength\t";
	fit_header_string += "p0\tp0Err\t";
	fit_header_string += "p1\tp1Err\t";
	fit_header_string += "p2\tp2Err\t";
	fit_header_string += "Chi2\t";
	fit_header_string += "\n";
	ftfile << fit_header_string;
	*/

	float gain_sum = 0;
	float gain2_sum = 0;
	int gain_cnt = 0;
	
	// go through each PMT channel
	for (unsigned i = 0; i < NUM_CHANNELS; i++) 
	  {
		// set up only the branches we use
		h1.SetBranchStatus("*", 0);
		h1.SetBranchStatus(Qadc[i], 1);
		h1.SetBranchStatus("Sis00", 1);
		h1.SetBranchStatus("S83028", 1);
		h1.SetBranchStatus("Pdc36", 1);


        // Find PMT Qadc Pedestal
        TF1 *pmt_pedestal_fit = FitGaussian(Qadc[i], &h1, pedestal_cut);
        float pmt_pedestal = 0;
        if (pmt_pedestal_fit)
            pmt_pedestal = pmt_pedestal_fit->GetParameter(1);


		// Define PMT:PD scan histograms
		TString H2F_down_name = "H2F_down_name_";
				H2F_down_name += detector[i];
		pd_pmt_his2D[DOWN][i] = new TH2F(H2F_down_name, "", 
				200, 0, 200,
				1<<8, -pmt_pedestal, 4096-pmt_pedestal);

		TString H2F_up_name = "H2F_up_name_";
				H2F_up_name += detector[i];
		pd_pmt_his2D[UP][i] = new TH2F(H2F_up_name, "", 
				400, 0, 400,
				1<<8, -pmt_pedestal, 4096-pmt_pedestal);

		TString time_gain_his1D_name = "time_gain_1D_";
		TString time_gain_his2D_name = "time_gain_2D_";
		time_gain_his1D_name += detector[i];
		time_gain_his2D_name += detector[i];

		pmt_gain_his1D[i] = new TH1F (time_gain_his1D_name, "", 
					      300, 0, 3000);
		pmt_gain_his2D[i] = new TH2F (time_gain_his2D_name, "", 
					      3600*10, 0, 3600,
					      300, 0, 3000);
		
		pd_pmt_his2D[DOWN][i]->GetXaxis()->SetTitle("Photodiode");
		pd_pmt_his2D[DOWN][i]->GetYaxis()->SetTitle("ADC");
		pd_pmt_his2D[UP][i]->GetXaxis()->SetTitle("Photodiode");
		pd_pmt_his2D[UP][i]->GetYaxis()->SetTitle("ADC");
		pmt_gain_his1D[i]->GetXaxis()->SetTitle("PMT ADC counts");

		TString draw_time_cmd = "S83028:Pdc36:";
				draw_time_cmd += Qadc[i];

		h1.SetEstimate(n);
		int vn = h1.Draw(draw_time_cmd, "(int(Sis00) & 128) > 0", "goff");
		double *s83028v = h1.GetV1();
		double *pdc36v = h1.GetV2();
		double *qadcv = h1.GetV3();
		std::cout << "Number of LED events: " << vn << std::endl;

		//int start_time = max_time[i];
		int start_time = 0;
		int last_time = start_time;
		int cycle = 0;
		int subcycle = 0;

		float x_sum[2][pulser_steps];
		float y_sum[2][pulser_steps];
		float x2_sum[2][pulser_steps];
		float y2_sum[2][pulser_steps];
		int num_pulses[2][pulser_steps];
		
		for (int led = 0; led < 2; led++)
		{
			for (int pulse = 0; pulse < pulser_steps; pulse++)
			{
				x_sum[led][pulse] = 0;
				y_sum[led][pulse] = 0;
				x2_sum[led][pulse] = 0;
				y2_sum[led][pulse] = 0;
				num_pulses[led][pulse] = 0;
			}
		}

		for (int j = 0; j < vn; j++) 
		{
			if (cycle+1 == max_cycles or max_val[cycle+1] == 0)
				break;

			float period = max_time[cycle+1] - max_time[cycle];
			float time = s83028v[j] - start_time;
			float cycle_time = s83028v[j] - last_time;
			if (cycle_time > period or period > max_period or period < min_period)
			{
				cycle++;
				subcycle = 0;
				cycle_time -= last_time;
				last_time = max_time[cycle];
			}

			if (min_period < period and period < max_period)
			{
				float subperiod = period / pulser_steps;
				float subcycle_time = cycle_time - subperiod * subcycle;
				if (subcycle_time > subperiod)
				{
					subcycle++;
					subcycle_time -= subperiod;
				}

				float x = pdc36v[j] - pd_pedestal;
				float y = qadcv[j] - pmt_pedestal;

				#if LINEARIZE
				#if ORDER
				// back out linearity from pd
				//double a[3] = {0, 7.01/7.601, -0.005296/7.601};
				double a[4] = {0, 8.19/8.19, -0.008783/8.19, 4.14e-6/8.19};

				float _x = a[ORDER];
				for (int k = ORDER; k > 0; k--)
					_x = a[k-1] + _x * x; 
				x = _x;
				
				#endif
				#endif
										  
				if (epsilon < subcycle_time and subcycle_time < subperiod/2 - epsilon) // ramps
				{
				  if (not i){               // only fill once
				    time_his2D[GAIN]->Fill(time/1e6, x);
				    time_his1D->Fill(x);
				    gain_sum += x;
				    gain2_sum += x*x;
				    gain_cnt++;
				  }
				  // PMT response during gain period
				  pmt_gain_his1D[i]->Fill(y);
				  pmt_gain_his2D[i]->Fill(time/1e6, y);
				}
				if (subperiod / 2 + epsilon < subcycle_time and subcycle_time < subperiod - epsilon) // gain
				{
				        int led = (cycle_time > period/2);
					if (cycle_time > period / 2) // ramp up (465nm?)
					{
						if (not i)
							time_his2D[UP]->Fill(time/1e6,x);
						pd_pmt_his2D[UP][i]->Fill(x, y);
						x_sum[UP][subcycle] += x;
						y_sum[UP][subcycle] += y;
						x2_sum[UP][subcycle] += x*x;
						y2_sum[UP][subcycle] += y*y;
						num_pulses[UP][subcycle] ++;
					}
					if (cycle_time < period / 2) // ramp down (405nm?)
					{
					        if (not i)        // Only Fill once
							time_his2D[DOWN]->Fill(time/1e6,x);
						pd_pmt_his2D[DOWN][i]->Fill(x, y);
						x_sum[DOWN][subcycle] += x;
						y_sum[DOWN][subcycle] += y;
						x2_sum[DOWN][subcycle] += x*x;
						y2_sum[DOWN][subcycle] += y*y;
						num_pulses[DOWN][subcycle] ++;
					}
				}
				time_his2D[TIME]->Fill( time/1e6, x);
			}
		}


		// set the graph points to the averages of the led cloud
		// TODO might be better to actually fit the peak better
		#if FIT2D
		printf("Coming Soon");
		return 0;
                #else
		
		for (int led = 0; led < 2; led++)
		{
        	graph[led][i] = new TGraphErrors(pulser_steps);
			for (int pulse = 0; pulse < pulser_steps; pulse++)
			{
				float d = num_pulses[led][pulse];
				if (d > 0)
				{
					float x_avg = x_sum[led][pulse]/d;
					float y_avg = y_sum[led][pulse]/d;
					float x2_avg = x2_sum[led][pulse]/d;
					float y2_avg = y2_sum[led][pulse]/d;
					float sx = sqrt((x2_avg - x_avg*x_avg)/(d-1));
					float sy = sqrt((y2_avg - y_avg*y_avg)/(d-1));
					graph[led][i]->SetPoint(pulse, x_avg, y_avg);
					graph[led][i]->SetPointError(pulse, sx, sy);
				}
			}
		}
		#endif

		// find the best range for the fit
		float range_max[2], range_min[2];
		for (int led = 0; led < 2; led++) 
		{
			// Find if the approximate range of the fit
			printf("Finding range... ");
			float _max = 0;
			for (int k = 0; k < pulser_steps; k++)
			{
				double x,y;
				graph[led][i]->GetPoint(k, x, y);
				if (y < max_adc_channel and x > _max) 
					_max = x;
			}
			range_max[led] = 0.93 * _max;
			//range_min[led] = 0.12 * _max;
			range_min[led] = 5;
			printf("found range (%f,%f)\n", range_min[led], range_max[led]); 

			// fit a curve
                        TString fit_string;
                        #if ORDER
			printf("Fitting LED linearity...\n");	
			fit_string = "[0]*x";
			for (int k = 1; k < ORDER; k++)
			  {
			    fit_string += " + [";
			    fit_string += k;
			    fit_string += "]*x**";
			    fit_string += k + 1;
			  }
                        #else
			//fit_string = "[0] * x ^ ( [1] + [2] * exp ( [3] * x ) )"; // not too stable
			fit_string =  "[0] * x ^ ( [1] + [2] * x )"; 
			//std::cout << "Fit string used: " << fit_string;
			#endif
			
			// Carry out the fit
			TF1 * fit = new TF1("fit", fit_string, range_min[led], range_max[led]);
			// initialize fit function
                        #if ORDER
			//		fit->SetParameters(5, -0.05, 0.00001);
			#else
			if (led) fit->SetParameters(10, 0.5, 0.0); 
			else fit->SetParameters(10, 1.0, 0.0);
                        #endif
			#if DO_LED_FIT
			graph[led][i]->Fit(fit, "R");
			//printf("done.\n");	
			std::cout << "A fit for run " << run << " finished." << std::endl;
		
			//Write fit parameters to file - include channel and led info
			fitpars = fit->GetParameters();
			fitparerrors = fit->GetParErrors();
			fitchisq = fit->GetChisquare()/fit->GetNDF(); // use reduced chi-squared
					
			Npar = fit->GetNpar();
			TString out_fit_string = "";
			out_fit_string += run;                out_fit_string += "\t"; 
			out_fit_string += i;                  out_fit_string += "\t"; 
			out_fit_string += wavelength[led];    out_fit_string += "\t"; 
			for (int k = 0; k < Npar; k++){
			  out_fit_string += fitpars[k];       out_fit_string += "\t";
			  out_fit_string += fitparerrors[k];  out_fit_string += "\t";
			}
			out_fit_string += fitchisq;           out_fit_string += "\t";
			out_fit_string += "\n";
			fitfile << out_fit_string;
			//std::cout << out_fit_string;
			#endif	
		}

        printf("Plotting LED intensity...");	
		TString canvas_name = "canvas_";
				canvas_name += detector[i];
		TString canvas_title = "LED Scan ";
				canvas_title += detector[i];
        canvas[i] = new TCanvas(canvas_name, canvas_title);
        canvas[i]->Divide(2,1);
        canvas[i]->GetPad(1)->Divide(1,2);

		for (int led = 0; led < 2; led++)
		{
			canvas[i]->GetPad(1)->cd(led+1);
			
			TString title = "LED Scan ";
					title += detector[i];
					title += " (";
					title += wavelength[led];
					title += " nm)";
			pd_pmt_his2D[led][i]->SetTitle(title);
			pd_pmt_his2D[led][i]->GetZaxis()->SetRangeUser(0, 16);
			pd_pmt_his2D[led][i]->Draw("colz");

			// Draw what we fit
			graph[led][i]->SetMarkerColor(1);
			graph[led][i]->SetLineColor(1);
			graph[led][i]->SetMarkerStyle(21);
			graph[led][i]->SetMarkerSize(0.75);
			graph[led][i]->Draw("SameP");
		}
        printf("done.\n");	

		
		// split the canvas
        canvas[i]->GetPad(2)->Divide(1,2);


        // find the number of photoelectrons and plot
        printf("Building nPE plot...");	
        g[i] = new TGraph(pulser_steps);
        for (unsigned pulse = 0; pulse < pulser_steps; pulse++)
        {
            double x, y;
			graph[LED_TYPE][i]->GetPoint(pulse,x,y);
            double sy = graph[LED_TYPE][i]->GetErrorY(pulse)*sqrt(num_pulses[LED_TYPE][pulse]-1);
			//std::cout << "y = " << y << " sy = " << sy << "\n";
            float pe = (sy<1)? 0:pow(y/sy,2);
			if (not isnan(pe) and y < max_adc_channel and pe < max_npe)
            	g[i]->SetPoint(pulse, x, pe);
        }


        printf("Plotting number of photoelectrons...");	
        canvas[i]->GetPad(2)->cd(1);
        g[i]->SetTitle("Number of photoelectrons");
        g[i]->SetMarkerColor(2);
        g[i]->SetLineColor(1);
        g[i]->SetMarkerStyle(21);
        g[i]->SetMarkerSize(0.75);
        g[i]->Draw("AP");
	#if DO_LED_FIT
        TF1 *pd_fit = new TF1("polyfit", "[0]*x", range_min[LED_TYPE], range_max[LED_TYPE]);
        if (g[i]->Fit(pd_fit, "R"))
            continue;
	printf("done.\n");
	#endif

        printf("Plotting residuals...");	
        canvas[i]->GetPad(2)->cd(2);
		resg[i] = new TGraphErrors(*graph[LED_TYPE][i]);
        resg[i]->SetTitle("PMT Linearity Residual");
        resg[i]->SetMinimum(-0.1);
        resg[i]->SetMaximum(0.1);
        resg[i]->Draw("AP");
        //g[i]->SetLineColor(4);
	printf("done.\n");
	
	  }  // end loop over channels

	fitfile.close();

	std::cout << "Fitting Gain Parameters" << std::endl;
	TF1 * mygaus = new TF1("mygaus", "gaus", 0, 1000);
	time_his1D->Fit("mygaus");
	double * projfit_pars = mygaus->GetParameters();
	double * projfit_errs = mygaus->GetParErrors();
	int projfit_Npars = mygaus->GetNpar();
	double projfit_chisq = mygaus->GetChisquare()/mygaus->GetNDF();
	  
	std::cout << "Writing gain parameters" << std::endl;
	TString gainfilename = "GainResults.txt";
	gainfilename = OUTPUT_IMAGE_DIR + gainfilename;
	ofstream gainfile;
	gainfile.open(gainfilename, std::ofstream::out | std::ofstream::app);
	TString out_gain_string = "";
	out_gain_string += run;                        out_gain_string += "\t"; 
	for (int q = 0; q < projfit_Npars; q++){
	  out_gain_string += projfit_pars[q];          out_gain_string += "\t";
	  out_gain_string += projfit_errs[q];          out_gain_string += "\t";
	}
	out_gain_string += projfit_chisq;              out_gain_string += "\t";
	out_gain_string += "\n";
	gainfile << out_gain_string;	

	gainfile.close();
	
	// Fit and write out results for PMT response during gain period
	double * pmt_pars;
	double * pmt_errs;
	int pmt_Npars = 0;
	double pmt_chisq = 0.;
	TF1 * pmtgaus = new TF1("pmtgaus", "gaus", 0, 3000);
	
	TString PMTgainfilename = "PMTGainResults.txt";
	PMTgainfilename = OUTPUT_IMAGE_DIR + PMTgainfilename;
	ofstream PMTgainfile;
	PMTgainfile.open(PMTgainfilename, std::ofstream::out | std::ofstream::app);

	for (int chan = 0; chan < NUM_CHANNELS; chan++){
	  std::cout << "Fitting PMT gain parameters " << chan << std::endl;
	  pmt_gain_his1D[chan]->Fit("pmtgaus","R");
	  pmt_pars = pmtgaus->GetParameters();
	  pmt_errs = pmtgaus->GetParErrors();
	  pmt_Npars = pmtgaus->GetNpar();
	  pmt_chisq = pmtgaus->GetChisquare()/pmtgaus->GetNDF();
	  
	  std::cout << "Writing ADC gain parameters " << chan << std::endl;
	  
	  TString adc_out_gain_string = "";
	  adc_out_gain_string += run;                    adc_out_gain_string += "\t"; 
	  adc_out_gain_string += chan;                   adc_out_gain_string += "\t"; 
	  for (int q = 0; q < pmt_Npars; q++){
	    adc_out_gain_string += pmt_pars[q];          adc_out_gain_string += "\t";
	    adc_out_gain_string += pmt_errs[q];          adc_out_gain_string += "\t";
	  }
	  adc_out_gain_string += pmt_chisq;              adc_out_gain_string += "\t";
	  adc_out_gain_string += "\n";
	  PMTgainfile << adc_out_gain_string;	
	}
	PMTgainfile.close();

	// draw time sequence
	TCanvas *time_canvas = new TCanvas("time_canvas", "PD time sequence");
	time_canvas->Divide(2,1);
	time_canvas->cd(1);
	//	true_time_his2D->GetYaxis()->SetRangeUser(-pd_pedestal, 500-pd_pedestal);
	true_time_his2D->Draw("scat");
	time_canvas->cd(2);
	time_his2D[TIME]->GetZaxis()->SetRangeUser(0, 4);
	time_his2D[TIME]->Draw("scat");

	#if OUTPUT_IMAGE
	        TString pd_time_filename = "pd_time_";
		pd_time_filename = OUTPUT_IMAGE_DIR + pd_time_filename;
   		pd_time_filename += argv[1];
		TString pd_time_rootfilename = pd_time_filename;
		pd_time_filename += ".gif";
		pd_time_rootfilename += ".root";
		time_canvas->SaveAs(pd_time_filename,"9");
		time_canvas->SaveAs(pd_time_rootfilename,"9");
	#endif

	TCanvas *colored_time_canvas = new TCanvas("colored_time_canvas", "Cut PD time sequence");
	time_his2D[UP]->SetMarkerColor(1);
	time_his2D[UP]->Draw("scat");
	time_his2D[DOWN]->SetMarkerColor(2);
	time_his2D[DOWN]->Draw("samescat");
	time_his2D[GAIN]->SetMarkerColor(3);
	time_his2D[GAIN]->Draw("samescat");

	#if OUTPUT_IMAGE
	        TString cut_pd_time_filename = "cut_pd_time_";
		cut_pd_time_filename = OUTPUT_IMAGE_DIR + cut_pd_time_filename;
   		cut_pd_time_filename += argv[1];
		TString cut_pd_time_rootfilename = cut_pd_time_filename;
		cut_pd_time_filename += ".gif";
		cut_pd_time_rootfilename += ".root";
		colored_time_canvas->SaveAs(cut_pd_time_filename,"9");
		colored_time_canvas->SaveAs(cut_pd_time_rootfilename,"9");
	#endif

	#if NUM_CHANNELS == 8
    TCanvas *ew_canvas = new TCanvas("all_pmt_linearity_canvas", 
									 "PMT linearity scans for all tubes", 1280, 720);
    ew_canvas->Divide(2,1);
    for (int ew = 0; ew < 2; ew++) {
        ew_canvas->GetPad(ew+1)->Divide(2,2);
        for (int tx = 0; tx < 2; tx++) {
            for (int ty = 0; ty < 2; ty++) {
				int i = 4*ew+tx+2*ty;
                ew_canvas->GetPad(ew+1)->cd(tx+2*ty+1);
		                        TString title = "Run "; 
                  				title += run;
						title += "    LED Scan: ";
						title += detector[i];
						title += " (";
						title += wavelength[DOWN];
						title += " nm and ";
						title += wavelength[UP];
						title += " nm)";
						pd_pmt_his2D[UP][i]->SetTitle(title);
				pd_pmt_his2D[DOWN][i]->SetTitle(title);
                pd_pmt_his2D[UP][i]->Draw("colz");
                graph[UP][i]->Draw("SameP");
                graph[UP][i]->SetName("GraphUP");
		pd_pmt_his2D[DOWN][i]->Draw("Samecolz");
                graph[DOWN][i]->Draw("SameP");
                graph[DOWN][i]->SetName("GraphDOWN");
            }
        }
    }

	#if OUTPUT_IMAGE
    TString pd_led_pmt_filename = "pd_led_pmt_";
    pd_led_pmt_filename = OUTPUT_IMAGE_DIR + pd_led_pmt_filename;
    //    TString pd_led_pmt_filename = "images/pd_led_pmt_";
                pd_led_pmt_filename += argv[1];
    TString pd_led_pmt_rootfilename = pd_led_pmt_filename;
    		pd_led_pmt_filename += ".gif";
    		pd_led_pmt_rootfilename += ".root";
    ew_canvas->SaveAs(pd_led_pmt_filename,"9");
    ew_canvas->SaveAs(pd_led_pmt_rootfilename,"9");
	#endif
	#endif

    TCanvas * gain_canvas = new TCanvas("gain_canvas", "Fitted Gain", 1000, 800);
    gain_canvas->Divide(1,2);
    gain_canvas->cd(1);
    time_his2D[GAIN]->Draw("scat");
    //   gain_his_pol0->Draw("scat");
    gain_canvas->cd(2);
    //    gain_his_pol1->Draw("scat");
    //gain_canvas->cd(3); 
    time_his1D->Draw();
    
    
    #if OUTPUT_IMAGE
           TString pd_gain_filename = "pd_gain_";
	   pd_gain_filename = OUTPUT_IMAGE_DIR + pd_gain_filename;
	   pd_gain_filename += argv[1];
	   TString pd_gain_rootfilename = pd_gain_filename;
	   pd_gain_filename += ".gif";
	   pd_gain_rootfilename += ".root";
	   gain_canvas->SaveAs(pd_gain_filename, "9");
	   gain_canvas->SaveAs(pd_gain_rootfilename, "9");
    #endif
	   
	   TCanvas * pmt_gain_canvas = new TCanvas("pmt_gain_canvas", "Fitted ADC gains", 1000, 800);
	   pmt_gain_canvas->Divide(4,2);
	   for (int chpmt = 0; chpmt < NUM_CHANNELS; chpmt++){
	     pmt_gain_canvas->cd(chpmt+1);
	     pmt_gain_his1D[chpmt]->Draw();
	   }
	   TCanvas * pmt_time_canvas = new TCanvas("pmt_time", "", 1000, 800);
	   pmt_time_canvas->Divide(4,2);
	   for (int chpmt = 0; chpmt < NUM_CHANNELS; chpmt++){
	     pmt_time_canvas->cd(chpmt+1);
	     pmt_gain_his2D[chpmt]->SetMaximum(5);
	     pmt_gain_his2D[chpmt]->Draw("colz");
	   }
	   
  #if OUTPUT_IMAGE
	   TString pmt_gain_filename = "pmt_gain_";
	   pmt_gain_filename = OUTPUT_IMAGE_DIR + pmt_gain_filename;
	   pmt_gain_filename += argv[1];
	   TString pmt_gain_rootfilename = pmt_gain_filename;
	   pmt_gain_filename += ".gif";
	   pmt_gain_rootfilename += ".root";
	   pmt_gain_canvas->SaveAs(pmt_gain_filename, "9");
	   pmt_gain_canvas->SaveAs(pmt_gain_rootfilename, "9");
	   
	   TString pmt_time_filename = "pmt_time_";
	   pmt_time_filename = OUTPUT_IMAGE_DIR + pmt_time_filename;
	   pmt_time_filename += argv[1];
	   TString pmt_time_rootfilename = pmt_time_filename;
	   pmt_time_filename += ".gif";
	   pmt_time_rootfilename += ".root";
	   pmt_time_canvas->SaveAs(pmt_time_filename, "9");
	   pmt_time_canvas->SaveAs(pmt_time_rootfilename, "9");
	   
    #endif

	#if USE_ROOT_APPLICATION
    // run the root application
    app.Run();
	#endif

    return 0;
}
